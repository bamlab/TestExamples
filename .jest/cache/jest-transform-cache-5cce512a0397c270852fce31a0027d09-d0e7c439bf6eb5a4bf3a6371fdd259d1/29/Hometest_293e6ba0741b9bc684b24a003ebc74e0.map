{"file":"/Users/matthieu/projects/TestExamples/src/pages/Home/__tests__/Home.test.tsx","mappings":";;;;;AAAA,kDAA0B;AAC1B,+EAAyE;AACzE,4DAAmC;AACnC,kCAAgC;AAEhC,kCAA+B;AAC/B,0DAAkF;AAClF,gDAAyD;AACzD,oDAAiD;AAEjD,QAAQ,CAAC,aAAa,EAAE,GAAG,EAAE;IAC3B,MAAM,KAAK,GAAG,gCAAsB,EAAE,CAAC;IACvC,MAAM,iBAAiB,GAAG,CAAC,MAAc,EAAE,EAAE;QAC3C,oBAAS,CAAC,IAAI,CAAC,2BAAkB,EAAE,MAAM,CAAC,CAAC;IAC7C,CAAC,CAAC;IAEF,UAAU,CAAC,GAAG,EAAE;QACd,oBAAS,CAAC,KAAK,EAAE,CAAC;IACpB,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6DAA6D,EAAE,KAAK,IAAI,EAAE;QAC3E,QAAQ;QACR,iBAAiB,CAAC,GAAG,CAAC,CAAC;QACvB,MAAM,IAAI,GAAG,oBAAU,CAAC,8BAAC,WAAI,oBAAK,KAAK,EAAI,CAAC,CAAC;QAC7C,QAAQ;QACR,MAAM,UAAU,GAAG,IAAI,CAAC,gBAAgB,CAAC,iBAAO,CAAC,gBAAgB,CAAC,CAAC;QACnE,MAAM,cAAc,GAAG,IAAI,CAAC,SAAS,CAAC,iBAAO,CAAC,aAAa,CAAC,CAAC;QAC7D,OAAO;QACP,wCAAS,CAAC,UAAU,CAAC,UAAU,EAAE,eAAe,CAAC,CAAC;QAClD,wCAAS,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;QAChC,OAAO;QACP,MAAM,cAAc,GAAG,MAAM,6CAAc,CAAC,GAAG,EAAE,CAC/C,IAAI,CAAC,WAAW,CAAC,iBAAO,CAAC,sBAAsB,CAAC,CACjD,CAAC;QACF,MAAM,CAAC,cAAc,CAAC,CAAC,UAAU,EAAE,CAAC;IACtC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qDAAqD,EAAE,KAAK,IAAI,EAAE;QACnE,QAAQ;QACR,iBAAiB,CAAC,GAAG,CAAC,CAAC;QACvB,MAAM,IAAI,GAAG,oBAAU,CAAC,8BAAC,WAAI,oBAAK,KAAK,EAAI,CAAC,CAAC;QAC7C,QAAQ;QACR,MAAM,UAAU,GAAG,IAAI,CAAC,gBAAgB,CAAC,iBAAO,CAAC,gBAAgB,CAAC,CAAC;QACnE,MAAM,cAAc,GAAG,IAAI,CAAC,SAAS,CAAC,iBAAO,CAAC,aAAa,CAAC,CAAC;QAC7D,OAAO;QACP,wCAAS,CAAC,UAAU,CAAC,UAAU,EAAE,aAAa,CAAC,CAAC;QAChD,wCAAS,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;QAChC,OAAO;QACP,MAAM,YAAY,GAAG,MAAM,6CAAc,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,iBAAO,CAAC,UAAU,CAAC,CAAC,CAAC;QACtF,MAAM,CAAC,YAAY,CAAC,CAAC,UAAU,EAAE,CAAC;IACpC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/matthieu/projects/TestExamples/src/pages/Home/__tests__/Home.test.tsx"],"sourcesContent":["import React from 'react';\nimport { fireEvent, waitForElement } from 'react-native-testing-library';\nimport fetchMock from 'fetch-mock';\nimport 'jest-styled-components';\n\nimport { Home } from '../Home';\nimport { renderPage, getPropsWithNavigation } from '../../../utils/tests/helpers';\nimport { EMAIL_API_ENDPOINT } from '../../../api/config';\nimport { wording } from '../../../utils/wording';\n\ndescribe('[Page] Home', () => {\n  const props = getPropsWithNavigation();\n  const mockPostSubscribe = (status: number) => {\n    fetchMock.post(EMAIL_API_ENDPOINT, status);\n  };\n\n  beforeEach(() => {\n    fetchMock.reset();\n  });\n\n  it('should display succesful message on successful subscription', async () => {\n    // SETUP\n    mockPostSubscribe(200);\n    const page = renderPage(<Home {...props} />);\n    // GIVEN\n    const EmailInput = page.getByPlaceholder(wording.emailPlaceholder);\n    const ValidateButton = page.getByText(wording.validateEmail);\n    // WHEN\n    fireEvent.changeText(EmailInput, 'hello@bam.com');\n    fireEvent.press(ValidateButton);\n    // THEN\n    const SuccessMessage = await waitForElement(() =>\n      page.queryByText(wording.subscriptionSuccessful)\n    );\n    expect(SuccessMessage).toBeTruthy();\n  });\n\n  it('should display error message on failed subscription', async () => {\n    // SETUP\n    mockPostSubscribe(400);\n    const page = renderPage(<Home {...props} />);\n    // GIVEN\n    const EmailInput = page.getByPlaceholder(wording.emailPlaceholder);\n    const ValidateButton = page.getByText(wording.validateEmail);\n    // WHEN\n    fireEvent.changeText(EmailInput, 'hello@bamom');\n    fireEvent.press(ValidateButton);\n    // THEN\n    const ErrorMessage = await waitForElement(() => page.queryByText(wording.basicError));\n    expect(ErrorMessage).toBeTruthy();\n  });\n});\n"],"version":3}