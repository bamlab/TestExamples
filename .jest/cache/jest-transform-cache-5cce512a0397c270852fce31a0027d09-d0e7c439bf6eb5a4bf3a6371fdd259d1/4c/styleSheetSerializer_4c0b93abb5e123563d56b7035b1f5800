ff5588ed146b5a6956e9690048e5f9dc
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var css = require('css');

var _require = require('./utils'),
    getCSS = _require.getCSS,
    getHashes = _require.getHashes;

var KEY = '__jest-styled-components__';

var getNodes = function getNodes(node) {
  var nodes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

  if (typeof node === 'object') {
    nodes.push(node);
  }

  if (node.children) {
    Array.from(node.children).forEach(function (child) {
      return getNodes(child, nodes);
    });
  }

  return nodes;
};

var markNodes = function markNodes(nodes) {
  return nodes.forEach(function (node) {
    return node[KEY] = true;
  });
};

var getClassNamesFromDOM = function getClassNamesFromDOM(node) {
  return Array.from(node.classList);
};

var getClassNamesFromProps = function getClassNamesFromProps(node) {
  var classNameProp = node.props && (node.props.class || node.props.className);

  if (classNameProp) {
    return classNameProp.trim().split(/\s+/);
  }

  return [];
};

var getClassNames = function getClassNames(nodes) {
  return nodes.reduce(function (classNames, node) {
    var newClassNames = null;

    if (global.Element && node instanceof global.Element) {
      newClassNames = getClassNamesFromDOM(node);
    } else {
      newClassNames = getClassNamesFromProps(node);
    }

    newClassNames.forEach(function (className) {
      return classNames.add(className);
    });
    return classNames;
  }, new Set());
};

var filterClassNames = function filterClassNames(classNames, hashes) {
  return classNames.filter(function (className) {
    return hashes.includes(className);
  });
};

var includesClassNames = function includesClassNames(classNames, selectors) {
  return classNames.some(function (className) {
    return selectors.some(function (selector) {
      return selector.includes(className);
    });
  });
};

var filterRules = function filterRules(classNames) {
  return function (rule) {
    return rule.type === 'rule' && includesClassNames(classNames, rule.selectors) && rule.declarations.length;
  };
};

var getAtRules = function getAtRules(ast, filter) {
  return ast.stylesheet.rules.filter(function (rule) {
    return rule.type === 'media' || rule.type === 'supports';
  }).reduce(function (acc, atRule) {
    atRule.rules = atRule.rules.filter(filter);

    if (atRule.rules.length) {
      return acc.concat(atRule);
    }

    return acc;
  }, []);
};

var getStyle = function getStyle(classNames) {
  var ast = getCSS();
  var filter = filterRules(classNames);
  var rules = ast.stylesheet.rules.filter(filter);
  var atRules = getAtRules(ast, filter);
  ast.stylesheet.rules = rules.concat(atRules);
  return css.stringify(ast);
};

var getClassNamesFromSelectorsByHashes = function getClassNamesFromSelectorsByHashes(classNames, hashes) {
  var ast = getCSS();
  var filter = filterRules(classNames);
  var rules = ast.stylesheet.rules.filter(filter);
  var selectors = rules.map(function (rule) {
    return rule.selectors;
  });
  var classNamesIncludingFromSelectors = new Set(classNames);

  var addHashFromSelectorListToClassNames = function addHashFromSelectorListToClassNames(hash) {
    return selectors.forEach(function (selectorList) {
      return selectorList[0].includes(hash) && classNamesIncludingFromSelectors.add(hash);
    });
  };

  hashes.forEach(addHashFromSelectorListToClassNames);
  return (0, _toConsumableArray2.default)(classNamesIncludingFromSelectors);
};

var replaceClassNames = function replaceClassNames(result, classNames, style) {
  return classNames.filter(function (className) {
    return style.includes(className);
  }).reduce(function (acc, className, index) {
    return acc.replace(new RegExp(className, 'g'), "c" + index++);
  }, result);
};

var replaceHashes = function replaceHashes(result, hashes) {
  return hashes.reduce(function (acc, className) {
    return acc.replace(new RegExp("((class|className)=\"[^\"]*?)" + className + "\\s?([^\"]*\")", 'g'), '$1$3');
  }, result);
};

var styleSheetSerializer = {
  test: function test(val) {
    return val && !val[KEY] && (val.$$typeof === (typeof Symbol === "function" ? Symbol.for : "@@for")('react.test.json') || global.Element && val instanceof global.Element);
  },
  print: function print(val, _print) {
    var nodes = getNodes(val);
    markNodes(nodes);
    var hashes = getHashes();
    var classNames = (0, _toConsumableArray2.default)(getClassNames(nodes));
    classNames = filterClassNames(classNames, hashes);
    var style = getStyle(classNames);
    var classNamesToReplace = getClassNamesFromSelectorsByHashes(classNames, hashes);

    var code = _print(val);

    var result = "" + style + (style ? '\n\n' : '') + code;
    result = replaceClassNames(result, classNamesToReplace, style);
    result = replaceHashes(result, hashes);
    return result;
  }
};
module.exports = styleSheetSerializer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,