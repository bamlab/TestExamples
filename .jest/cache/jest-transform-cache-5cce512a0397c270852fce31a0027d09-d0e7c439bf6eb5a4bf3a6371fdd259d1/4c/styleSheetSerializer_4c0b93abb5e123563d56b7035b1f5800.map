{"version":3,"sources":["styleSheetSerializer.js"],"names":["css","require","getCSS","getHashes","KEY","getNodes","node","nodes","push","children","Array","from","forEach","child","markNodes","getClassNamesFromDOM","classList","getClassNamesFromProps","classNameProp","props","class","className","trim","split","getClassNames","reduce","classNames","newClassNames","global","Element","add","Set","filterClassNames","hashes","filter","includes","includesClassNames","selectors","some","selector","filterRules","rule","type","declarations","length","getAtRules","ast","stylesheet","rules","acc","atRule","concat","getStyle","atRules","stringify","getClassNamesFromSelectorsByHashes","map","classNamesIncludingFromSelectors","addHashFromSelectorListToClassNames","hash","selectorList","replaceClassNames","result","style","index","replace","RegExp","replaceHashes","styleSheetSerializer","test","val","$$typeof","Symbol","for","print","classNamesToReplace","code","module","exports"],"mappings":"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","sourcesContent":["const css = require('css')\nconst { getCSS, getHashes } = require('./utils')\n\nconst KEY = '__jest-styled-components__'\n\nconst getNodes = (node, nodes = []) => {\n  if (typeof node === 'object') {\n    nodes.push(node)\n  }\n\n  if (node.children) {\n    Array.from(node.children).forEach(child => getNodes(child, nodes))\n  }\n\n  return nodes\n}\n\nconst markNodes = nodes => nodes.forEach(node => (node[KEY] = true))\n\nconst getClassNamesFromDOM = node => Array.from(node.classList)\nconst getClassNamesFromProps = node => {\n  const classNameProp = node.props && (node.props.class || node.props.className)\n\n  if (classNameProp) {\n    return classNameProp.trim().split(/\\s+/)\n  }\n\n  return []\n}\n\nconst getClassNames = nodes =>\n  nodes.reduce((classNames, node) => {\n    let newClassNames = null\n\n    if (global.Element && node instanceof global.Element) {\n      newClassNames = getClassNamesFromDOM(node)\n    } else {\n      newClassNames = getClassNamesFromProps(node)\n    }\n\n    newClassNames.forEach(className => classNames.add(className))\n\n    return classNames\n  }, new Set())\n\nconst filterClassNames = (classNames, hashes) =>\n  classNames.filter(className => hashes.includes(className))\n\nconst includesClassNames = (classNames, selectors) =>\n  classNames.some(className =>\n    selectors.some(selector => selector.includes(className))\n  )\n\nconst filterRules = classNames => rule =>\n  rule.type === 'rule' &&\n  includesClassNames(classNames, rule.selectors) &&\n  rule.declarations.length\n\nconst getAtRules = (ast, filter) =>\n  ast.stylesheet.rules\n    .filter(rule => rule.type === 'media' || rule.type === 'supports')\n    .reduce((acc, atRule) => {\n      atRule.rules = atRule.rules.filter(filter)\n\n      if (atRule.rules.length) {\n        return acc.concat(atRule)\n      }\n\n      return acc\n    }, [])\n\nconst getStyle = classNames => {\n  const ast = getCSS()\n  const filter = filterRules(classNames)\n  const rules = ast.stylesheet.rules.filter(filter)\n  const atRules = getAtRules(ast, filter)\n\n  ast.stylesheet.rules = rules.concat(atRules)\n\n  return css.stringify(ast)\n}\n\nconst getClassNamesFromSelectorsByHashes = (classNames, hashes) => {\n  const ast = getCSS()\n  const filter = filterRules(classNames)\n  const rules = ast.stylesheet.rules.filter(filter)\n\n  const selectors = rules.map(rule => rule.selectors)\n  const classNamesIncludingFromSelectors = new Set(classNames)\n  const addHashFromSelectorListToClassNames = hash =>\n    selectors.forEach(\n      selectorList =>\n        selectorList[0].includes(hash) &&\n        classNamesIncludingFromSelectors.add(hash)\n    )\n\n  hashes.forEach(addHashFromSelectorListToClassNames)\n\n  return [...classNamesIncludingFromSelectors]\n}\n\nconst replaceClassNames = (result, classNames, style) =>\n  classNames\n    .filter(className => style.includes(className))\n    .reduce(\n      (acc, className, index) =>\n        acc.replace(new RegExp(className, 'g'), `c${index++}`),\n      result\n    )\n\nconst replaceHashes = (result, hashes) =>\n  hashes.reduce(\n    (acc, className) =>\n      acc.replace(\n        new RegExp(`((class|className)=\"[^\"]*?)${className}\\\\s?([^\"]*\")`, 'g'),\n        '$1$3'\n      ),\n    result\n  )\n\nconst styleSheetSerializer = {\n  test(val) {\n    return (\n      val &&\n      !val[KEY] &&\n      (val.$$typeof === Symbol.for('react.test.json') ||\n        (global.Element && val instanceof global.Element))\n    )\n  },\n\n  print(val, print) {\n    const nodes = getNodes(val)\n    markNodes(nodes)\n\n    const hashes = getHashes()\n    let classNames = [...getClassNames(nodes)]\n    classNames = filterClassNames(classNames, hashes)\n\n    const style = getStyle(classNames)\n    const classNamesToReplace = getClassNamesFromSelectorsByHashes(\n      classNames,\n      hashes\n    )\n    const code = print(val)\n\n    let result = `${style}${style ? '\\n\\n' : ''}${code}`\n    result = replaceClassNames(result, classNamesToReplace, style)\n    result = replaceHashes(result, hashes)\n\n    return result\n  },\n}\n\nmodule.exports = styleSheetSerializer\n"]}