3cb636651ce3ef9703c2de5d7dccde2e
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _require = require('./utils'),
    getCSS = _require.getCSS,
    matcherTest = _require.matcherTest,
    buildReturnMessage = _require.buildReturnMessage;

var shouldDive = function shouldDive(node) {
  return typeof node.dive === 'function' && typeof node.type() !== 'string';
};

var isTagWithClassName = function isTagWithClassName(node) {
  return node.exists() && node.prop('className') && typeof node.type() === 'string';
};

var getClassNames = function getClassNames(received) {
  var className;

  if (received) {
    if (received.$$typeof === (typeof Symbol === "function" ? Symbol.for : "@@for")('react.test.json')) {
      className = received.props.className || received.props.class;
    } else if (typeof received.exists === 'function' && received.exists()) {
      var tree = shouldDive(received) ? received.dive() : received;
      var components = tree.findWhere(isTagWithClassName);

      if (components.length) {
        className = components.first().prop('className');
      }
    } else if (global.Element && received instanceof global.Element) {
      className = Array.from(received.classList).join(' ');
    }
  }

  return className ? className.split(/\s/) : [];
};

var hasAtRule = function hasAtRule(options) {
  return Object.keys(options).some(function (option) {
    return ['media', 'supports'].includes(option);
  });
};

var getAtRules = function getAtRules(ast, options) {
  var mediaRegex = /(\([a-z-]+:)\s?([a-z0-9.]+\))/g;
  return Object.keys(options).map(function (option) {
    return ast.stylesheet.rules.filter(function (rule) {
      return rule.type === option && rule[option] === options[option].replace(mediaRegex, '$1$2');
    }).map(function (rule) {
      return rule.rules;
    }).reduce(function (acc, rules) {
      return acc.concat(rules);
    }, []);
  }).reduce(function (acc, rules) {
    return acc.concat(rules);
  }, []);
};

var getModifiedClassName = function getModifiedClassName(className) {
  var modifier = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  var classNameSelector = "." + className;
  var prefix = '';
  modifier = modifier.trim();

  if (modifier.includes('&')) {
    modifier = modifier.replace(/&/g, classNameSelector);
  } else {
    prefix += classNameSelector;
  }

  var first = modifier[0];

  if (first !== ':' && first !== '[') {
    prefix += ' ';
  }

  return ("" + prefix + modifier).trim();
};

var hasClassNames = function hasClassNames(classNames, selectors, options) {
  return classNames.some(function (className) {
    return selectors.includes(getModifiedClassName(className, options.modifier));
  });
};

var getRules = function getRules(ast, classNames, options) {
  var rules = hasAtRule(options) ? getAtRules(ast, options) : ast.stylesheet.rules;
  return rules.filter(function (rule) {
    return rule.type === 'rule' && hasClassNames(classNames, rule.selectors, options);
  });
};

var handleMissingRules = function handleMissingRules(options) {
  return {
    pass: false,
    message: function message() {
      return "No style rules found on passed Component" + (Object.keys(options).length ? " using options:\n" + JSON.stringify(options) : '');
    }
  };
};

var getDeclaration = function getDeclaration(rule, property) {
  return rule.declarations.filter(function (declaration) {
    return declaration.type === 'declaration' && declaration.property === property;
  }).pop();
};

var getDeclarations = function getDeclarations(rules, property) {
  return rules.map(function (rule) {
    return getDeclaration(rule, property);
  }).filter(Boolean);
};

var normalizeOptions = function normalizeOptions(options) {
  return options.modifier ? (0, _extends2.default)({}, options, {
    modifier: Array.isArray(options.modifier) ? options.modifier.join('') : options.modifier
  }) : options;
};

function toHaveStyleRule(component, property, expected) {
  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  var classNames = getClassNames(component);
  var ast = getCSS();
  var normalizedOptions = normalizeOptions(options);
  var rules = getRules(ast, classNames, normalizedOptions);

  if (!rules.length) {
    return handleMissingRules(normalizedOptions);
  }

  var declarations = getDeclarations(rules, property);
  var declaration = declarations.pop() || {};
  var received = declaration.value;
  var pass = !received && !expected && this.isNot ? false : matcherTest(received, expected);
  return {
    pass: pass,
    message: buildReturnMessage(this.utils, pass, property, received, expected)
  };
}

module.exports = toHaveStyleRule;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRvSGF2ZVN0eWxlUnVsZS5qcyJdLCJuYW1lcyI6WyJyZXF1aXJlIiwiZ2V0Q1NTIiwibWF0Y2hlclRlc3QiLCJidWlsZFJldHVybk1lc3NhZ2UiLCJzaG91bGREaXZlIiwibm9kZSIsImRpdmUiLCJ0eXBlIiwiaXNUYWdXaXRoQ2xhc3NOYW1lIiwiZXhpc3RzIiwicHJvcCIsImdldENsYXNzTmFtZXMiLCJyZWNlaXZlZCIsImNsYXNzTmFtZSIsIiQkdHlwZW9mIiwiU3ltYm9sIiwiZm9yIiwicHJvcHMiLCJjbGFzcyIsInRyZWUiLCJjb21wb25lbnRzIiwiZmluZFdoZXJlIiwibGVuZ3RoIiwiZmlyc3QiLCJnbG9iYWwiLCJFbGVtZW50IiwiQXJyYXkiLCJmcm9tIiwiY2xhc3NMaXN0Iiwiam9pbiIsInNwbGl0IiwiaGFzQXRSdWxlIiwib3B0aW9ucyIsIk9iamVjdCIsImtleXMiLCJzb21lIiwib3B0aW9uIiwiaW5jbHVkZXMiLCJnZXRBdFJ1bGVzIiwiYXN0IiwibWVkaWFSZWdleCIsIm1hcCIsInN0eWxlc2hlZXQiLCJydWxlcyIsImZpbHRlciIsInJ1bGUiLCJyZXBsYWNlIiwicmVkdWNlIiwiYWNjIiwiY29uY2F0IiwiZ2V0TW9kaWZpZWRDbGFzc05hbWUiLCJtb2RpZmllciIsImNsYXNzTmFtZVNlbGVjdG9yIiwicHJlZml4IiwidHJpbSIsImhhc0NsYXNzTmFtZXMiLCJjbGFzc05hbWVzIiwic2VsZWN0b3JzIiwiZ2V0UnVsZXMiLCJoYW5kbGVNaXNzaW5nUnVsZXMiLCJwYXNzIiwibWVzc2FnZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJnZXREZWNsYXJhdGlvbiIsInByb3BlcnR5IiwiZGVjbGFyYXRpb25zIiwiZGVjbGFyYXRpb24iLCJwb3AiLCJnZXREZWNsYXJhdGlvbnMiLCJCb29sZWFuIiwibm9ybWFsaXplT3B0aW9ucyIsImlzQXJyYXkiLCJ0b0hhdmVTdHlsZVJ1bGUiLCJjb21wb25lbnQiLCJleHBlY3RlZCIsIm5vcm1hbGl6ZWRPcHRp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QUFHLEdBQUd0QyxNQUFNLEVBQWxCO0FBQ0EsTUFBTTJFLGlCQUFpQixHQUFHTCxnQkFBZ0IsQ0FBQ3ZDLE9BQUQsQ0FBMUM7QUFDQSxNQUFNVyxLQUFLLEdBQUdlLFFBQVEsQ0FBQ25CLEdBQUQsRUFBTWlCLFVBQU4sRUFBa0JvQixpQkFBbEIsQ0FBdEI7O0FBRUEsTUFBSSxDQUFDakMsS0FBSyxDQUFDckIsTUFBWCxFQUFtQjtBQUNqQixXQUFPcUMsa0JBQWtCLENBQUNpQixpQkFBRCxDQUF6QjtBQUNEOztBQUVELE1BQU1WLFlBQVksR0FBR0csZUFBZSxDQUFDMUIsS0FBRCxFQUFRc0IsUUFBUixDQUFwQztBQUNBLE1BQU1FLFdBQVcsR0FBR0QsWUFBWSxDQUFDRSxHQUFiLE1BQXNCLEVBQTFDO0FBQ0EsTUFBTXhELFFBQVEsR0FBR3VELFdBQVcsQ0FBQ1UsS0FBN0I7QUFDQSxNQUFNakIsSUFBSSxHQUFHLENBQUNoRCxRQUFELElBQWEsQ0FBQytELFFBQWQsSUFBMEIsS0FBS0csS0FBL0IsR0FBdUMsS0FBdkMsR0FBK0M1RSxXQUFXLENBQUNVLFFBQUQsRUFBVytELFFBQVgsQ0FBdkU7QUFFQSxTQUFPO0FBQ0xmLElBQUFBLElBQUksRUFBSkEsSUFESztBQUVMQyxJQUFBQSxPQUFPLEVBQUUxRCxrQkFBa0IsQ0FBQyxLQUFLNEUsS0FBTixFQUFhbkIsSUFBYixFQUFtQkssUUFBbkIsRUFBNkJyRCxRQUE3QixFQUF1QytELFFBQXZDO0FBRnRCLEdBQVA7QUFJRDs7QUFFREssTUFBTSxDQUFDQyxPQUFQLEdBQWlCUixlQUFqQiIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsgZ2V0Q1NTLCBtYXRjaGVyVGVzdCwgYnVpbGRSZXR1cm5NZXNzYWdlIH0gPSByZXF1aXJlKCcuL3V0aWxzJyk7XG5cbmNvbnN0IHNob3VsZERpdmUgPSBub2RlID0+IHR5cGVvZiBub2RlLmRpdmUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIG5vZGUudHlwZSgpICE9PSAnc3RyaW5nJztcblxuY29uc3QgaXNUYWdXaXRoQ2xhc3NOYW1lID0gbm9kZSA9PiBub2RlLmV4aXN0cygpICYmIG5vZGUucHJvcCgnY2xhc3NOYW1lJykgJiYgdHlwZW9mIG5vZGUudHlwZSgpID09PSAnc3RyaW5nJztcblxuY29uc3QgZ2V0Q2xhc3NOYW1lcyA9IHJlY2VpdmVkID0+IHtcbiAgbGV0IGNsYXNzTmFtZTtcblxuICBpZiAocmVjZWl2ZWQpIHtcbiAgICBpZiAocmVjZWl2ZWQuJCR0eXBlb2YgPT09IFN5bWJvbC5mb3IoJ3JlYWN0LnRlc3QuanNvbicpKSB7XG4gICAgICBjbGFzc05hbWUgPSByZWNlaXZlZC5wcm9wcy5jbGFzc05hbWUgfHwgcmVjZWl2ZWQucHJvcHMuY2xhc3M7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgcmVjZWl2ZWQuZXhpc3RzID09PSAnZnVuY3Rpb24nICYmIHJlY2VpdmVkLmV4aXN0cygpKSB7XG4gICAgICBjb25zdCB0cmVlID0gc2hvdWxkRGl2ZShyZWNlaXZlZCkgPyByZWNlaXZlZC5kaXZlKCkgOiByZWNlaXZlZDtcbiAgICAgIGNvbnN0IGNvbXBvbmVudHMgPSB0cmVlLmZpbmRXaGVyZShpc1RhZ1dpdGhDbGFzc05hbWUpO1xuICAgICAgaWYgKGNvbXBvbmVudHMubGVuZ3RoKSB7XG4gICAgICAgIGNsYXNzTmFtZSA9IGNvbXBvbmVudHMuZmlyc3QoKS5wcm9wKCdjbGFzc05hbWUnKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGdsb2JhbC5FbGVtZW50ICYmIHJlY2VpdmVkIGluc3RhbmNlb2YgZ2xvYmFsLkVsZW1lbnQpIHtcbiAgICAgIGNsYXNzTmFtZSA9IEFycmF5LmZyb20ocmVjZWl2ZWQuY2xhc3NMaXN0KS5qb2luKCcgJyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNsYXNzTmFtZSA/IGNsYXNzTmFtZS5zcGxpdCgvXFxzLykgOiBbXTtcbn07XG5cbmNvbnN0IGhhc0F0UnVsZSA9IG9wdGlvbnMgPT4gT2JqZWN0LmtleXMob3B0aW9ucykuc29tZShvcHRpb24gPT4gWydtZWRpYScsICdzdXBwb3J0cyddLmluY2x1ZGVzKG9wdGlvbikpO1xuXG5jb25zdCBnZXRBdFJ1bGVzID0gKGFzdCwgb3B0aW9ucykgPT4ge1xuICBjb25zdCBtZWRpYVJlZ2V4ID0gLyhcXChbYS16LV0rOilcXHM/KFthLXowLTkuXStcXCkpL2c7XG5cbiAgcmV0dXJuIE9iamVjdC5rZXlzKG9wdGlvbnMpXG4gICAgLm1hcChvcHRpb24gPT5cbiAgICAgIGFzdC5zdHlsZXNoZWV0LnJ1bGVzXG4gICAgICAgIC5maWx0ZXIocnVsZSA9PiBydWxlLnR5cGUgPT09IG9wdGlvbiAmJiBydWxlW29wdGlvbl0gPT09IG9wdGlvbnNbb3B0aW9uXS5yZXBsYWNlKG1lZGlhUmVnZXgsICckMSQyJykpXG4gICAgICAgIC5tYXAocnVsZSA9PiBydWxlLnJ1bGVzKVxuICAgICAgICAucmVkdWNlKChhY2MsIHJ1bGVzKSA9PiBhY2MuY29uY2F0KHJ1bGVzKSwgW10pXG4gICAgKVxuICAgIC5yZWR1Y2UoKGFjYywgcnVsZXMpID0+IGFjYy5jb25jYXQocnVsZXMpLCBbXSk7XG59O1xuXG5jb25zdCBnZXRNb2RpZmllZENsYXNzTmFtZSA9IChjbGFzc05hbWUsIG1vZGlmaWVyID0gJycpID0+IHtcbiAgY29uc3QgY2xhc3NOYW1lU2VsZWN0b3IgPSBgLiR7Y2xhc3NOYW1lfWA7XG4gIGxldCBwcmVmaXggPSAnJztcblxuICBtb2RpZmllciA9IG1vZGlmaWVyLnRyaW0oKTtcbiAgaWYgKG1vZGlmaWVyLmluY2x1ZGVzKCcmJykpIHtcbiAgICBtb2RpZmllciA9IG1vZGlmaWVyLnJlcGxhY2UoLyYvZywgY2xhc3NOYW1lU2VsZWN0b3IpO1xuICB9IGVsc2Uge1xuICAgIHByZWZpeCArPSBjbGFzc05hbWVTZWxlY3RvcjtcbiAgfVxuICBjb25zdCBmaXJzdCA9IG1vZGlmaWVyWzBdO1xuICBpZiAoZmlyc3QgIT09ICc6JyAmJiBmaXJzdCAhPT0gJ1snKSB7XG4gICAgcHJlZml4ICs9ICcgJztcbiAgfVxuXG4gIHJldHVybiBgJHtwcmVmaXh9JHttb2RpZmllcn1gLnRyaW0oKTtcbn07XG5cbmNvbnN0IGhhc0NsYXNzTmFtZXMgPSAoY2xhc3NOYW1lcywgc2VsZWN0b3JzLCBvcHRpb25zKSA9PlxuICBjbGFzc05hbWVzLnNvbWUoY2xhc3NOYW1lID0+IHNlbGVjdG9ycy5pbmNsdWRlcyhnZXRNb2RpZmllZENsYXNzTmFtZShjbGFzc05hbWUsIG9wdGlvbnMubW9kaWZpZXIpKSk7XG5cbmNvbnN0IGdldFJ1bGVzID0gKGFzdCwgY2xhc3NOYW1lcywgb3B0aW9ucykgPT4ge1xuICBjb25zdCBydWxlcyA9IGhhc0F0UnVsZShvcHRpb25zKSA/IGdldEF0UnVsZXMoYXN0LCBvcHRpb25zKSA6IGFzdC5zdHlsZXNoZWV0LnJ1bGVzO1xuXG4gIHJldHVybiBydWxlcy5maWx0ZXIocnVsZSA9PiBydWxlLnR5cGUgPT09ICdydWxlJyAmJiBoYXNDbGFzc05hbWVzKGNsYXNzTmFtZXMsIHJ1bGUuc2VsZWN0b3JzLCBvcHRpb25zKSk7XG59O1xuXG5jb25zdCBoYW5kbGVNaXNzaW5nUnVsZXMgPSBvcHRpb25zID0+ICh7XG4gIHBhc3M6IGZhbHNlLFxuICBtZXNzYWdlOiAoKSA9PlxuICAgIGBObyBzdHlsZSBydWxlcyBmb3VuZCBvbiBwYXNzZWQgQ29tcG9uZW50JHtcbiAgICAgIE9iamVjdC5rZXlzKG9wdGlvbnMpLmxlbmd0aCA/IGAgdXNpbmcgb3B0aW9uczpcXG4ke0pTT04uc3RyaW5naWZ5KG9wdGlvbnMpfWAgOiAnJ1xuICAgIH1gLFxufSk7XG5cbmNvbnN0IGdldERlY2xhcmF0aW9uID0gKHJ1bGUsIHByb3BlcnR5KSA9PlxuICBydWxlLmRlY2xhcmF0aW9uc1xuICAgIC5maWx0ZXIoZGVjbGFyYXRpb24gPT4gZGVjbGFyYXRpb24udHlwZSA9PT0gJ2RlY2xhcmF0aW9uJyAmJiBkZWNsYXJhdGlvbi5wcm9wZXJ0eSA9PT0gcHJvcGVydHkpXG4gICAgLnBvcCgpO1xuXG5jb25zdCBnZXREZWNsYXJhdGlvbnMgPSAocnVsZXMsIHByb3BlcnR5KSA9PiBydWxlcy5tYXAocnVsZSA9PiBnZXREZWNsYXJhdGlvbihydWxlLCBwcm9wZXJ0eSkpLmZpbHRlcihCb29sZWFuKTtcblxuY29uc3Qgbm9ybWFsaXplT3B0aW9ucyA9IG9wdGlvbnMgPT5cbiAgb3B0aW9ucy5tb2RpZmllclxuICAgID8gT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucywge1xuICAgICAgICBtb2RpZmllcjogQXJyYXkuaXNBcnJheShvcHRpb25zLm1vZGlmaWVyKSA/IG9wdGlvbnMubW9kaWZpZXIuam9pbignJykgOiBvcHRpb25zLm1vZGlmaWVyLFxuICAgICAgfSlcbiAgICA6IG9wdGlvbnM7XG5cbmZ1bmN0aW9uIHRvSGF2ZVN0eWxlUnVsZShjb21wb25lbnQsIHByb3BlcnR5LCBleHBlY3RlZCwgb3B0aW9ucyA9IHt9KSB7XG4gIGNvbnN0IGNsYXNzTmFtZXMgPSBnZXRDbGFzc05hbWVzKGNvbXBvbmVudCk7XG4gIGNvbnN0IGFzdCA9IGdldENTUygpO1xuICBjb25zdCBub3JtYWxpemVkT3B0aW9ucyA9IG5vcm1hbGl6ZU9wdGlvbnMob3B0aW9ucyk7XG4gIGNvbnN0IHJ1bGVzID0gZ2V0UnVsZXMoYXN0LCBjbGFzc05hbWVzLCBub3JtYWxpemVkT3B0aW9ucyk7XG5cbiAgaWYgKCFydWxlcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gaGFuZGxlTWlzc2luZ1J1bGVzKG5vcm1hbGl6ZWRPcHRpb25zKTtcbiAgfVxuXG4gIGNvbnN0IGRlY2xhcmF0aW9ucyA9IGdldERlY2xhcmF0aW9ucyhydWxlcywgcHJvcGVydHkpO1xuICBjb25zdCBkZWNsYXJhdGlvbiA9IGRlY2xhcmF0aW9ucy5wb3AoKSB8fCB7fTtcbiAgY29uc3QgcmVjZWl2ZWQgPSBkZWNsYXJhdGlvbi52YWx1ZTtcbiAgY29uc3QgcGFzcyA9ICFyZWNlaXZlZCAmJiAhZXhwZWN0ZWQgJiYgdGhpcy5pc05vdCA/IGZhbHNlIDogbWF0Y2hlclRlc3QocmVjZWl2ZWQsIGV4cGVjdGVkKTtcblxuICByZXR1cm4ge1xuICAgIHBhc3MsXG4gICAgbWVzc2FnZTogYnVpbGRSZXR1cm5NZXNzYWdlKHRoaXMudXRpbHMsIHBhc3MsIHByb3BlcnR5LCByZWNlaXZlZCwgZXhwZWN0ZWQpLFxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRvSGF2ZVN0eWxlUnVsZTtcbiJdfQ==