{"version":3,"sources":["utils.js"],"names":["css","require","ServerStyleSheet","isStyledComponent","StyleSheet","secretInternals","__DO_NOT_USE_OR_YOU_WILL_BE_HAUNTED_BY_SPOOKY_GHOSTS","undefined","Error","default","isServer","document","resetStyleSheet","reset","getHTML","getStyleTags","instance","toHTML","extract","regex","style","matches","exec","trim","getStyle","getCSS","parse","getClassNames","split","getComponentIDs","getHashes","concat","filter","Boolean","buildReturnMessage","utils","pass","property","received","expected","printReceived","printExpected","matcherTest","matcher","RegExp","expect","stringMatching","toEqual","error","module","exports"],"mappings":"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","sourcesContent":["const css = require('css')\nconst { ServerStyleSheet, isStyledComponent } = require('styled-components')\n\nlet StyleSheet\n\nif (isStyledComponent) {\n  const secretInternals = require('styled-components')\n    .__DO_NOT_USE_OR_YOU_WILL_BE_HAUNTED_BY_SPOOKY_GHOSTS\n\n  if (\n    secretInternals === undefined ||\n    secretInternals.StyleSheet === undefined\n  ) {\n    throw new Error(\n      'Could neither find styled-components secret internals nor styled-components/lib/models/StyleSheet.js'\n    )\n  } else {\n    StyleSheet = secretInternals.StyleSheet\n  }\n} else {\n  StyleSheet = require('styled-components/lib/models/StyleSheet').default // eslint-disable-line\n}\n\nconst isServer = () => typeof document === 'undefined'\n\nconst resetStyleSheet = () => StyleSheet.reset(isServer())\n\nconst getHTML = () =>\n  isServer()\n    ? new ServerStyleSheet().getStyleTags()\n    : StyleSheet.instance.toHTML()\n\nconst extract = regex => {\n  let style = ''\n  let matches\n\n  while ((matches = regex.exec(getHTML())) !== null) {\n    style += `${matches[1]} `\n  }\n\n  return style.trim()\n}\n\nconst getStyle = () => extract(/<style[^>]*>([^<]*)</g)\n\nconst getCSS = () => css.parse(getStyle())\n\nconst getClassNames = () =>\n  extract(/data-styled(?:-components)?=\"([^\"]*)\"/g).split(/\\s/)\n\nconst getComponentIDs = () =>\n  extract(/sc-component-id: ([^\\\\*\\\\/]*) \\*\\//g).split(/\\s/)\n\nconst getHashes = () =>\n  getClassNames()\n    .concat(getComponentIDs())\n    .filter(Boolean)\n\nconst buildReturnMessage = (utils, pass, property, received, expected) => () =>\n  `${utils.printReceived(\n    !received && !pass\n      ? `Property '${property}' not found in style rules`\n      : `Value mismatch for property '${property}'`\n  )}\\n\\n` +\n  'Expected\\n' +\n  `  ${utils.printExpected(`${property}: ${expected}`)}\\n` +\n  'Received:\\n' +\n  `  ${utils.printReceived(`${property}: ${received}`)}`\n\nconst matcherTest = (received, expected) => {\n  try {\n    const matcher =\n      expected instanceof RegExp ? expect.stringMatching(expected) : expected\n\n    expect(received).toEqual(matcher)\n    return true\n  } catch (error) {\n    return false\n  }\n}\n\nmodule.exports = {\n  resetStyleSheet,\n  getCSS,\n  getHashes,\n  buildReturnMessage,\n  matcherTest,\n}\n"]}