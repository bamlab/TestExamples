"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const react_native_testing_library_1 = require("react-native-testing-library");
const react_redux_1 = require("react-redux");
const Toaster_1 = require("../../components/Toaster");
const saga_1 = __importDefault(require("../../modules/saga"));
const styled_components_1 = require("styled-components");
const theme_1 = require("../theme");
const mockStore_1 = require("./mockStore");
const storeManager_1 = require("../../modules/storeManager");
exports.renderWithTheme = (page) => {
    return react_native_testing_library_1.render(react_1.default.createElement(styled_components_1.ThemeProvider, { theme: theme_1.theme }, page));
};
exports.renderPage = (page, initialState) => {
    storeManager_1.storeManager.store = mockStore_1.createInitialiasedStore(initialState);
    mockStore_1.sagaMiddlewareTest.run(saga_1.default);
    return exports.renderWithTheme(react_1.default.createElement(react_redux_1.Provider, { store: storeManager_1.storeManager.store },
        page,
        react_1.default.createElement(Toaster_1.Toaster, null)));
};
exports.getPropsWithNavigation = (props, navigationPropExtension) => ({
    ...props,
    navigation: {
        navigate: jest.fn(),
        ...navigationPropExtension,
    },
});
exports.getMockApiResponse = (status, data = {}) => ({ status, body: { data } });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hdHRoaWV1L3Byb2plY3RzL1Rlc3RFeGFtcGxlcy9zcmMvdXRpbHMvdGVzdHMvaGVscGVycy50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxrREFBNEM7QUFDNUMsK0VBQXNEO0FBQ3RELDZDQUF1QztBQUV2QyxzREFBbUQ7QUFDbkQsOERBQTBDO0FBQzFDLHlEQUFrRDtBQUNsRCxvQ0FBaUM7QUFFakMsMkNBQTBFO0FBQzFFLDZEQUEwRDtBQUU3QyxRQUFBLGVBQWUsR0FBRyxDQUFDLElBQWtCLEVBQUUsRUFBRTtJQUNwRCxPQUFPLHFDQUFNLENBQUMsOEJBQUMsaUNBQWEsSUFBQyxLQUFLLEVBQUUsYUFBSyxJQUFHLElBQUksQ0FBaUIsQ0FBQyxDQUFDO0FBQ3JFLENBQUMsQ0FBQztBQUVXLFFBQUEsVUFBVSxHQUFHLENBQUMsSUFBa0IsRUFBRSxZQUFpQyxFQUFFLEVBQUU7SUFDbEYsMkJBQVksQ0FBQyxLQUFLLEdBQUcsbUNBQXVCLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDM0QsOEJBQWtCLENBQUMsR0FBRyxDQUFDLGNBQVEsQ0FBQyxDQUFDO0lBRWpDLE9BQU8sdUJBQWUsQ0FDcEIsOEJBQUMsc0JBQVEsSUFBQyxLQUFLLEVBQUUsMkJBQVksQ0FBQyxLQUFLO1FBQ2hDLElBQUk7UUFDTCw4QkFBQyxpQkFBTyxPQUFHLENBQ0YsQ0FDWixDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBRVcsUUFBQSxzQkFBc0IsR0FBRyxDQUFDLEtBQVcsRUFBRSx1QkFBNkIsRUFBRSxFQUFFLENBQ25GLENBQUM7SUFDQyxHQUFHLEtBQUs7SUFDUixVQUFVLEVBQUU7UUFDVixRQUFRLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtRQUNuQixHQUFHLHVCQUF1QjtLQUMzQjtDQUNNLENBQUEsQ0FBQztBQUVDLFFBQUEsa0JBQWtCLEdBQUcsQ0FBQyxNQUFjLEVBQUUsT0FBWSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYXR0aGlldS9wcm9qZWN0cy9UZXN0RXhhbXBsZXMvc3JjL3V0aWxzL3Rlc3RzL2hlbHBlcnMudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBSZWFjdEVsZW1lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyByZW5kZXIgfSBmcm9tICdyZWFjdC1uYXRpdmUtdGVzdGluZy1saWJyYXJ5JztcbmltcG9ydCB7IFByb3ZpZGVyIH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuXG5pbXBvcnQgeyBUb2FzdGVyIH0gZnJvbSAnLi4vLi4vY29tcG9uZW50cy9Ub2FzdGVyJztcbmltcG9ydCB3YXRjaEFsbCBmcm9tICcuLi8uLi9tb2R1bGVzL3NhZ2EnO1xuaW1wb3J0IHsgVGhlbWVQcm92aWRlciB9IGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJztcbmltcG9ydCB7IHRoZW1lIH0gZnJvbSAnLi4vdGhlbWUnO1xuaW1wb3J0IHsgSUFwcFN0YXRlIH0gZnJvbSAnLi4vLi4vbW9kdWxlcy90eXBlcyc7XG5pbXBvcnQgeyBjcmVhdGVJbml0aWFsaWFzZWRTdG9yZSwgc2FnYU1pZGRsZXdhcmVUZXN0IH0gZnJvbSAnLi9tb2NrU3RvcmUnO1xuaW1wb3J0IHsgc3RvcmVNYW5hZ2VyIH0gZnJvbSAnLi4vLi4vbW9kdWxlcy9zdG9yZU1hbmFnZXInO1xuXG5leHBvcnQgY29uc3QgcmVuZGVyV2l0aFRoZW1lID0gKHBhZ2U6IFJlYWN0RWxlbWVudCkgPT4ge1xuICByZXR1cm4gcmVuZGVyKDxUaGVtZVByb3ZpZGVyIHRoZW1lPXt0aGVtZX0+e3BhZ2V9PC9UaGVtZVByb3ZpZGVyPik7XG59O1xuXG5leHBvcnQgY29uc3QgcmVuZGVyUGFnZSA9IChwYWdlOiBSZWFjdEVsZW1lbnQsIGluaXRpYWxTdGF0ZT86IFBhcnRpYWw8SUFwcFN0YXRlPikgPT4ge1xuICBzdG9yZU1hbmFnZXIuc3RvcmUgPSBjcmVhdGVJbml0aWFsaWFzZWRTdG9yZShpbml0aWFsU3RhdGUpO1xuICBzYWdhTWlkZGxld2FyZVRlc3QucnVuKHdhdGNoQWxsKTtcblxuICByZXR1cm4gcmVuZGVyV2l0aFRoZW1lKFxuICAgIDxQcm92aWRlciBzdG9yZT17c3RvcmVNYW5hZ2VyLnN0b3JlfT5cbiAgICAgIHtwYWdlfVxuICAgICAgPFRvYXN0ZXIgLz5cbiAgICA8L1Byb3ZpZGVyPlxuICApO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldFByb3BzV2l0aE5hdmlnYXRpb24gPSAocHJvcHM/OiBhbnksIG5hdmlnYXRpb25Qcm9wRXh0ZW5zaW9uPzogYW55KSA9PlxuICAoe1xuICAgIC4uLnByb3BzLFxuICAgIG5hdmlnYXRpb246IHtcbiAgICAgIG5hdmlnYXRlOiBqZXN0LmZuKCksXG4gICAgICAuLi5uYXZpZ2F0aW9uUHJvcEV4dGVuc2lvbixcbiAgICB9LFxuICB9IGFzIGFueSk7XG5cbmV4cG9ydCBjb25zdCBnZXRNb2NrQXBpUmVzcG9uc2UgPSAoc3RhdHVzOiBudW1iZXIsIGRhdGE6IGFueSA9IHt9KSA9PiAoeyBzdGF0dXMsIGJvZHk6IHsgZGF0YSB9IH0pO1xuIl0sInZlcnNpb24iOjN9